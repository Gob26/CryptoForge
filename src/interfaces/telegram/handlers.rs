// src/interfaces/telegram/handlers.rs —Ä–∞–±–æ—á

use teloxide::{prelude::*, utils::command::BotCommands};
// –ù–∞—à–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å Binance
use crate::infrastructure::exchanges::binance;
// enum –¢–µ–ª–µ–≥—Ä–∞–º–º–∞ 
use super::commands::Command;
// appstate –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
use super::dispatcher::AppState;

// –°—Ç–∞—Ä—Ç
pub async fn start_handler(bot: Bot, msg: Message) -> ResponseResult<()> {
    bot.send_message(msg.chat.id, Command::descriptions().to_string())
        .await?;
    Ok(())
}

pub async fn price_handler(bot: Bot, msg: Message, symbol: String) -> ResponseResult<()> {
    if symbol.is_empty() {
        bot.send_message(
            msg.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price. –ù–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT"
        ).await?;
        return Ok(());
    }

    match binance::get_binance_price(&symbol).await {
        Ok(price_data) => {
            let message = format!(
                "üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {}\nüí∞ –¶–µ–Ω–∞: {}",
                price_data.symbol, 
                price_data.price
            );
            bot.send_message(msg.chat.id, message).await?;
        }
        Err(e) => {
            eprintln!("Error getting simple price for {}: {}", symbol, e);
            let error_message = format!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {}. –û—à–∏–±–∫–∞: {}", 
                symbol, e
            );
            bot.send_message(msg.chat.id, error_message).await?;
        }
    }    
    Ok(())
}

pub async fn info_handler(bot: Bot, msg: Message, symbol: String) -> ResponseResult<()> {
    if symbol.is_empty() {
        bot.send_message(
            msg.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info. –ù–∞–ø—Ä–∏–º–µ—Ä: /info BTCUSDT"
        ).await?;
        return Ok(());
    }

    match binance::get_24hr_ticker_info(&symbol).await {
        Ok(ticker_data) => {
            let percentage = ticker_data.price_change_percent
                .parse::<f64>()
                .unwrap_or(0.0);
            
            let message = format!(
                "üìä –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è {}\nüí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {}\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {} ({:.2}%)\n‚¨ÜÔ∏è –ú–∞–∫—Å. –∑–∞ 24—á: {}\n‚¨áÔ∏è –ú–∏–Ω. –∑–∞ 24—á: {}\nüì¶ –û–±—ä–µ–º –∑–∞ 24—á: {}",
                ticker_data.symbol,
                ticker_data.last_price,
                ticker_data.price_change,
                percentage,
                ticker_data.high_price,
                ticker_data.low_price,
                ticker_data.volume
            );
            
            bot.send_message(msg.chat.id, message).await?;
        }
        Err(e) => {
            eprintln!("Error getting 24hr ticker info for {}: {}", symbol, e);
            let error_message = format!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –¥–ª—è {}. –û—à–∏–±–∫–∞: {}", 
                symbol, e
            );
            bot.send_message(msg.chat.id, error_message).await?;
        }
    }    
    Ok(())
}

pub async fn add_whale_handler(
    bot: Bot,
    msg: Message,
    state: AppState,
    address: String,
) -> ResponseResult<()> {
    if address.is_empty() {
        bot.send_message(
            msg.chat.id,
            "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /add_whale 0x...",
        )
        .await?;
        return Ok(());
    }

    if !address.starts_with("0x") || address.len() != 42 {
        let error_message = format!(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: {}. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '0x' –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 42 —Å–∏–º–≤–æ–ª–∞.",
            address
        );
        bot.send_message(msg.chat.id, error_message).await?;
        return Ok(());
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –º—å—é—Ç–µ–∫—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ await
    let message = {
        let mut whales = state.tracked_whales.lock().await;
        if whales.contains(&address) {
            format!("–ê–¥—Ä–µ—Å {} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.", address)
        } else {
            whales.insert(address.clone());
            format!("–ê–¥—Ä–µ—Å {} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", address)
        }
    }; // –∑–¥–µ—Å—å MutexGuard –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏, –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ await

    // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(msg.chat.id, message).await?;
    Ok(())
}



