// src/interfaces/telegram/handlers.rs
use teloxide::{prelude::*, utils::command::BotCommands};
//–ù–∞—à–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ë–∏–Ω–∞–Ω—Å–æ–º
use crate::infrastructure::exchanges::binance;
// enum –¢–µ–ª–µ–≥—Ä–∞–º–º–∞ 
use super::commands::Command;

//–°—Ç–∞—Ä—Ç
pub async fn start_handler(bot: Bot, msg: Message) -> ResponseResult<()> {
    bot.send_message(msg.chat.id, Command::descriptions().to_string())
        .await?;
    Ok(())
}

pub async fn price_handler(bot: Bot, msg: Message, symbol: String) -> ResponseResult<()> {
    if symbol.is_empty() {
        bot.send_message(
            msg.chat.id,
           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price. –ù–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT"
        ).await?;
        return Ok(());
    }



    match binance::get_binance_price(&symbol).await {
        Ok(price_data) => {
            bot.send_message(
                msg.chat.id,
                format!("
üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {}
üí∞ –¶–µ–Ω–∞: {}
",
                price_data.symbol, price_data.price
),
            )
                .await?;
        }
        Err(e) => {
            eprintln!("Error getting simple price for {}: {}", symbol, e);
            bot.send_message(
                msg.chat.id,
                format!("
–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {}. –û—à–∏–±–∫–∞: {}", symbol, e),
            )
            .await?;
        }
    }    
    Ok(())
}

pub async fn info_handler(bot: Bot, msg: Message, symbol: String) -> ResponseResult<()> {
    if symbol.is_empty() {
        bot.send_message(
            msg.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info. –ù–∞–ø—Ä–∏–º–µ—Ä: /info BTCUSDT"
        ).await?;
        return Ok(());
    }

    match binance::get_24hr_ticker_info(&symbol).await {
        Ok(ticker_data) => {
            bot.send_message(
                msg.chat.id,
                format!(
        "
üìä –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è {}
üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {}
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {} ({:.2}%)
‚¨ÜÔ∏è –ú–∞–∫—Å. –∑–∞ 24—á: {}
‚¨áÔ∏è –ú–∏–Ω. –∑–∞ 24—á: {}
üì¶ –û–±—ä–µ–º –∑–∞ 24—á: {}",
                    ticker_data.symbol,
                    ticker_data.last_price,
                    ticker_data.price_change,
                    ticker_data.price_change_percent.parse::<f64>().unwrap_or(0.0),
                    ticker_data.high_price,
                    ticker_data.low_price,
                    ticker_data.volume
                ),
            )
            .await?;
        }
        Err(e) => {
            eprintln!("Error getting 24hr ticker info for {}: {}", symbol, e);
            bot.send_message(
                msg.chat.id,
                format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –¥–ª—è {}. –û—à–∏–±–∫–∞: {}", symbol, e),
            )
            .await?;
        }
    }    
    Ok(())
}
